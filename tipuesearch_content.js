var tipuesearch = {"pages":[{"title":"TofuCode404 Page not found","text":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTofuCode404 Page not found\n\n\n\n\n\n\n\n\nTofuCode\n\n\n\n\n\n\n\n\n\nInterview Questions\n\n\nRecent Questions\n\n\nTags\n\n\n\n\n\n\n\n 404 Page Note Found \n Try a search \n\n\n\n\n\n Eat Tofu and be true \nÂ© 2022 TofuCode.com\n\nBuilt with Pelican using Flex theme\n \n\n\n\n\n","tags":"","url":"https://tofucode.com/404.html"},{"title":"Hello there","text":"Quick Start For a table of all the questions: Interview Questions For a list of all questions tags: Tags","tags":"pages","url":"https://tofucode.com/pages/hello-there.html","loc":"https://tofucode.com/pages/hello-there.html"},{"title":"Interview Questions","text":"# Question Tags 0001 Two Sum hash-map 0002 Add Two Numbers linked-list, dummy-list-head 0011 Container With Most Water two-pointers 0019 Remove Nth Node From End of List linked-list 0020 Valid Parentheses stack, parentheses 0021 Merge Two Sorted Lists linked-list 0061 Rotate List linked-list, list-to-ring 0074 Search a 2D Matrix binary-search 0138 Copy List with Random Pointer linked-list, dummy-list-head, recursion 0141 Linked List Cycle linked-list, fast-slow-pointer 0167 Two Sum II - Input Array Is Sorted k-sum 0173 Binary Search Tree Iterator bst 0198 House Robber dp 0289 Game of Life simulation, state-changes 0344 Reverse String string 0347 Top K Frequent Elements k-most-points, bucket-sort, hash-map 0413 Arithmetic Slices dp 0509 Fibonacci Number recursion 0647 Palindromic Substrings palindrome, string 0682 Baseball Game simulation 0700 Search in a Binary Search Tree bst 0740 Delete and Earn dp 0799 Champagne Tower simulation 0881 Boats to Save People two-pointers, greedy 0897 Increasing Order Search Tree bst 0946 Validate Stack Sequences stack, simulation, greedy 0991 Broken Calculator reverse-thinking, puzzle 1249 Minimum Remove to Make Valid Parentheses stack, parentheses 2293 Min Max Game recursion, simulation 0606 Construct String from Binary Tree recursion, binary-tree","tags":"pages","url":"https://tofucode.com/pages/interview-questions.html","loc":"https://tofucode.com/pages/interview-questions.html"},{"title":"Leetcode 0167. Two Sum II - Input Array Is Sorted","text":"Question Link : https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/ Difficulty: Medium Question Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length. Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2. The tests are generated such that there is exactly one solution. You may not use the same element twice. Your solution must use only constant extra space. Example 1: Input: numbers = [2,7,11,15], target = 9 Output: [1,2] Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2]. Example 2: Input: numbers = [2,3,4], target = 6 Output: [1,3] Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3]. Example 3: Input: numbers = [-1,0], target = -1 Output: [1,2] Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2]. Constraints: 2 <= numbers.length <= 3 * 104 -1000 <= numbers[i] <= 1000 numbers is sorted in non-decreasing order. -1000 <= target <= 1000 The tests are generated such that there is exactly one solution. Solution Since the numbers are sorted we can start two pointers from each end and move inwards till the sum is the target Code ''' Leetcode 0167. Two Sum II - Input Array Is Sorted Question Link : https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/ Solution Link : https://tofucode.com/posts/leetcode_0167_two-sum-ii-input-array-is-sorted.html ''' class Solution : def twoSum ( self , numbers : List [ int ], target : int ) -> List [ int ]: ''' Either move i+1 or move j-1 till the sum is target Time : O(n) Space: O(1) ''' i = 0 j = len ( numbers ) - 1 while i < j : s = numbers [ i ] + numbers [ j ] if s == target : return [ i + 1 , j + 1 ] elif s < target : i += 1 else : j -= 1","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0167_two-sum-ii-input-array-is-sorted.html","loc":"https://tofucode.com/posts/leetcode_0167_two-sum-ii-input-array-is-sorted.html"},{"title":"Leetcode 2293. Min Max Game","text":"Question Link : https://leetcode.com/problems/min-max-game/ Difficulty: Easy Question You are given a 0-indexed integer array nums whose length is a power of 2. Apply the following algorithm on nums: Let n be the length of nums. If n == 1, end the process. Otherwise, create a new 0-indexed integer array newNums of length n / 2. For every even index i where 0 <= i < n / 2, assign the value of newNums[i] as min(nums[2 * i], nums[2 * i + 1]). For every odd index i where 0 <= i < n / 2, assign the value of newNums[i] as max(nums[2 * i], nums[2 * i + 1]). Replace the array nums with newNums. Repeat the entire process starting from step 1. Return the last number that remains in nums after applying the algorithm. Example 1: Input: nums = [1,3,5,2,4,8,2,2] Output: 1 Explanation: The following arrays are the results of applying the algorithm repeatedly. First: nums = [1,5,4,2] Second: nums = [1,4] Third: nums = [1] 1 is the last remaining number, so we return 1. Example 2: Input: nums = [3] Output: 3 Explanation: 3 is already the last remaining number, so we return 3. Constraints: 1 <= nums.length <= 1024 1 <= nums[i] <= 109 nums.length is a power of 2. Solution Write a recursion based on the given rules. Code ''' Leetcode 2293. Min Max Game Question Link : https://leetcode.com/problems/min-max-game/ Solution Link : https://tofucode.com/posts/leetcode_2293_min-max-game.html ''' class Solution : def minMaxGame ( self , nums : List [ int ]) -> int : if len ( nums ) == 1 : return nums [ 0 ] half = len ( nums ) // 2 temp = [ None ] * half for i in range ( half ): if i % 2 == 0 : temp [ i ] = min ( nums [ 2 * i ], nums [ 2 * i + 1 ]) else : temp [ i ] = max ( nums [ 2 * i ], nums [ 2 * i + 1 ]) return self . minMaxGame ( temp )","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_2293_min-max-game.html","loc":"https://tofucode.com/posts/leetcode_2293_min-max-game.html"},{"title":"Leetcode 0647. Palindromic Substrings","text":"Question Link : https://leetcode.com/problems/palindromic-substrings/ Difficulty: Medium Question Given a string s, return the number of palindromic substrings in it. A string is a palindrome when it reads the same backward as forward. A substring is a contiguous sequence of characters within the string. Example 1: Input: s = \"abc\" Output: 3 Explanation: Three palindromic strings: \"a\", \"b\", \"c\". Example 2: Input: s = \"aaa\" Output: 6 Explanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\". Constraints: 1 <= s.length <= 1000 s consists of lowercase English letters. Solution This is a palindrome problem where we need to use center expansion for each char in the string, and check ood and even cases of palindromes Code ''' Leetcode 0647. Palindromic Substrings Question Link : https://leetcode.com/problems/palindromic-substrings/ Solution Link : https://tofucode.com/posts/leetcode_0647_palindromic-substrings.html ''' class Solution : def countSubstrings ( self , s : str ) -> int : ''' Go through every char and expand from the center Need to check odd and even cases of palindromes Time : O(n&#94;2) Space: O(1) ''' count = 0 for i in range ( len ( s )): count += self . countPalindrome ( s , i , i ) count += self . countPalindrome ( s , i , i + 1 ) return count def countPalindrome ( self , s , l , r ): ''' returns Palindrome count starting at l, r index''' start = l while l >= 0 and r <= len ( s ) - 1 : if s [ l ] == s [ r ]: l -= 1 r += 1 else : break return start - l","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0647_palindromic-substrings.html","loc":"https://tofucode.com/posts/leetcode_0647_palindromic-substrings.html"},{"title":"Leetcode 0173. Binary Search Tree Iterator","text":"Question Link : https://leetcode.com/problems/binary-search-tree-iterator/ Difficulty: Medium Question Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST): BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST. boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false. int next() Moves the pointer to the right, then returns the number at the pointer. Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST. You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called. Example 1: Input [\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"] [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []] Output [null, 3, 7, true, 9, true, 15, true, 20, false] Explanation BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); bSTIterator.next(); // return 3 bSTIterator.next(); // return 7 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 9 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 15 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 20 bSTIterator.hasNext(); // return False Constraints: The number of nodes in the tree is in the range [1, 105]. 0 <= Node.val <= 106 At most 105 calls will be made to hasNext, and next. Follow up: Could you implement next() and hasNext() to run in average O(1) time and use O(h) memory, where h is the height of the tree? Solution Trivial solution is to use a stack and traverse the whole tree in init Best solution is to use a stack to only always store the left subtree Code ''' Leetcode 0173. Binary Search Tree Iterator Question Link : https://leetcode.com/problems/binary-search-tree-iterator/ Solution Link : https://tofucode.com/posts/leetcode_0173_binary-search-tree-iterator.html ''' # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class BSTIterator : ''' Use in order traversal to put everything into a stack first Time and space for next: Time : O(1) Space: O(n) ''' def __init__ ( self , root : Optional [ TreeNode ]): self . stack = [] self . idx = 0 self . traverse ( root ) def next ( self ) -> int : result = self . stack [ self . idx ] self . idx += 1 return result def hasNext ( self ) -> bool : return self . idx < len ( self . stack ) def traverse ( self , node ): if not node : return self . traverse ( node . left ) self . stack . append ( node . val ) self . traverse ( node . right ) class BSTIteratorImproved1 : ''' stack only stores the current left tree [7 3] [7] # next [15, 9] # next [15] # next [20] # next Time : O(1) Space: O(h) ''' def __init__ ( self , root : Optional [ TreeNode ]): # store in reverse so we can pop() self . stack = [] self . traverseLeft ( root ) def next ( self ) -> int : node = self . stack . pop () if node . right : self . traverseLeft ( node . right ) return node . val def hasNext ( self ) -> bool : return len ( self . stack ) > 0 def traverseLeft ( self , node ): if not node : return self . stack . append ( node ) self . traverseLeft ( node . left ) # Your BSTIterator object will be instantiated and called as such: # obj = BSTIterator(root) # param_1 = obj.next() # param_2 = obj.hasNext()","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0173_binary-search-tree-iterator.html","loc":"https://tofucode.com/posts/leetcode_0173_binary-search-tree-iterator.html"},{"title":"Leetcode 0897. Increasing Order Search Tree","text":"Question Link : https://leetcode.com/problems/increasing-order-search-tree/ Difficulty: Easy Question Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child. Example 1: Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9] Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9] Example 2: Input: root = [5,1,7] Output: [1,null,5,null,7] Constraints: The number of nodes in the given tree will be in the range [1, 100]. 0 <= Node.val <= 1000 Solution Use the same left traversal as the iterator problem and link the right pointer, and set the left pointer to None Code ''' Leetcode 0897. Increasing Order Search Tree Question Link : https://leetcode.com/problems/increasing-order-search-tree/ Solution Link : https://tofucode.com/posts/leetcode_0897_increasing-order-search-tree.html ''' # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution : def increasingBST ( self , root : TreeNode ) -> TreeNode : ''' Time : O(n) Space: O(h) ''' if not root : return # store in reverse so we can pop() self . stack = [] self . traverseLeft ( root ) last = self . next () new_head = last while self . hasNext (): node = self . next () last . right = node node . left = None last = node return new_head def next ( self ): node = self . stack . pop () if node . right : self . traverseLeft ( node . right ) return node def hasNext ( self ) -> bool : return len ( self . stack ) > 0 def traverseLeft ( self , node ): if not node : return self . stack . append ( node ) self . traverseLeft ( node . left )","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0897_increasing-order-search-tree.html","loc":"https://tofucode.com/posts/leetcode_0897_increasing-order-search-tree.html"},{"title":"Leetcode 0700. Search in a Binary Search Tree","text":"Question Link : https://leetcode.com/problems/search-in-a-binary-search-tree/ Difficulty: Easy Question You are given the root of a binary search tree (BST) and an integer val. Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null. Example 1: Input: root = [4,2,7,1,3], val = 2 Output: [2,1,3] Example 2: Input: root = [4,2,7,1,3], val = 5 Output: [] Constraints: The number of nodes in the tree is in the range [1, 5000]. 1 <= Node.val <= 107 root is a binary search tree. 1 <= val <= 107 Solution Recursive or Iterative Code ''' Leetcode 0700. Search in a Binary Search Tree Question Link : https://leetcode.com/problems/search-in-a-binary-search-tree/ Solution Link : https://tofucode.com/posts/leetcode_0700_search-in-a-binary-search-tree.html ''' # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution : def searchBST ( self , root : Optional [ TreeNode ], val : int ) -> Optional [ TreeNode ]: ''' Recursive Time : O(log n) Space: O(1) ''' if not root : return if val == root . val : return root elif val < root . val : return self . searchBST ( root . left , val ) else : return self . searchBST ( root . right , val ) class SolutionAlternative1 : def searchBST ( self , root : Optional [ TreeNode ], val : int ) -> Optional [ TreeNode ]: ''' Iterative Time : O(log n) Space: O(1) ''' node = root while node : if node . val == val : return node elif node . val < val : node = node . right else : node = node . left return None","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0700_search-in-a-binary-search-tree.html","loc":"https://tofucode.com/posts/leetcode_0700_search-in-a-binary-search-tree.html"},{"title":"Leetcode 0289. Game of Life","text":"Question Link : https://leetcode.com/problems/game-of-life/ Difficulty: Medium Question According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\" The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article): Any live cell with fewer than two live neighbors dies as if caused by under-population. Any live cell with two or three live neighbors lives on to the next generation. Any live cell with more than three live neighbors dies, as if by over-population. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state. Example 1: Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]] Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]] Example 2: Input: board = [[1,1],[1,0]] Output: [[1,1],[1,1]] Constraints: m == board.length n == board[i].length 1 <= m, n <= 25 board[i][j] is 0 or 1. Follow up: Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells. In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems? Solution With Extra space, we can check all cells based on the original board With no extra space, we can use different numbers to encode more info Code ''' Leetcode 0289. Game of Life Question Link : https://leetcode.com/problems/game-of-life/ Solution Link : https://tofucode.com/posts/leetcode_0289_game-of-life.html ''' class Solution : def gameOfLife ( self , board : List [ List [ int ]]) -> None : ''' With another board: go through each one and calculated he updated status Time : O(mn) Space: O(mn) ''' if len ( board ) == 0 : return rows = len ( board ) cols = len ( board [ 0 ]) if rows else 0 temp = [[ 0 ] * cols for x in range ( rows )] for i in range ( rows ): for j in range ( cols ): temp [ i ][ j ] = self . getState ( i , j , board , rows , cols ) # copy the board over board [:] = temp [:] def getState ( self , i , j , board , rows , cols ): offsets = [( - 1 , - 1 ), ( - 1 , 0 ), ( - 1 , 1 ), ( 0 , - 1 ), ( 0 , 1 ), ( 1 , - 1 ), ( 1 , 0 ), ( 1 , 1 )] live = 0 cell = board [ i ][ j ] for offset in offsets : x = i + offset [ 0 ] y = j + offset [ 1 ] if 0 <= x < rows and 0 <= y < cols : if board [ x ][ y ] == 1 : live += 1 # Any live cell with fewer than two live neighbors dies, as if caused by under-population. if live < 2 and cell == 1 : return 0 # Any live cell with two or three live neighbors lives on to the next generation. if ( live == 2 or live == 3 ) and cell == 1 : return 1 # Any live cell with more than three live neighbors dies, as if by over-population.. if live > 3 and cell == 1 : return 0 # Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. if cell == 0 and live == 3 : return 1 return cell class SolutionFollowUp1 : def gameOfLife ( self , board : List [ List [ int ]]) -> None : ''' Follow up: Could you solve it in-place? To do it in place: * need to save a intermediate state * later run another loop to turn it to 1, 0 End up Alive: 1: live 2: dead -> live End up Dead: 0: dead -1: live -> dead Time : O(mn) Space: O(1) ''' if len ( board ) == 0 : return rows = len ( board ) cols = len ( board [ 0 ]) if rows else 0 # update with intermediate state for i in range ( rows ): for j in range ( cols ): board [ i ][ j ] = self . getState ( board , i , j , rows , cols ) # process another loop to write 1, 0 based on state info for i in range ( rows ): for j in range ( cols ): if board [ i ][ j ] >= 1 : board [ i ][ j ] = 1 else : board [ i ][ j ] = 0 def getState ( self , board , i , j , rows , cols ): offsets = [( - 1 , - 1 ), ( - 1 , 0 ), ( - 1 , 1 ), ( 0 , - 1 ), ( 0 , 1 ), ( 1 , - 1 ), ( 1 , 0 ), ( 1 , 1 )] live = 0 cell = board [ i ][ j ] for offset in offsets : x = i + offset [ 0 ] y = j + offset [ 1 ] if 0 <= x < rows and 0 <= y < cols : if self . wasAlive ( board [ x ][ y ]): live += 1 # Any live cell with fewer than two live neighbors dies, as if caused by under-population. if live < 2 and cell == 1 : return - 1 # live -> dead # Any live cell with two or three live neighbors lives on to the next generation. if ( live == 2 or live == 3 ) and cell == 1 : return 1 # Any live cell with more than three live neighbors dies, as if by over-population.. if live > 3 and cell == 1 : return - 1 # live -> dead # Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. if cell == 0 and live == 3 : return 2 # dead -> live return cell def wasAlive ( self , i ): return i == 1 or i == - 1","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0289_game-of-life.html","loc":"https://tofucode.com/posts/leetcode_0289_game-of-life.html"},{"title":"Leetcode 0347. Top K Frequent Elements","text":"Question Link : https://leetcode.com/problems/top-k-frequent-elements/ Difficulty: Medium Question Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order. Example 1: Input: nums = [1,1,1,2,2,3], k = 2 Output: [1,2] Example 2: Input: nums = [1], k = 1 Output: [1] Constraints: 1 <= nums.length <= 105 k is in the range [1, the number of unique elements in the array]. It is guaranteed that the answer is unique. Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size. Solution First get a number to count map, then get the count to frequency map, last is to take the top k from the frequency map Code ''' Leetcode 0347. Top K Frequent Elements Question Link : https://leetcode.com/problems/top-k-frequent-elements/ Solution Link : https://tofucode.com/posts/leetcode_0347_top-k-frequent-elements.html ''' class Solution : def topKFrequent ( self , nums : List [ int ], k : int ) -> List [ int ]: ''' freq: count -> number list Sort and take the top K Time : O(n) + O(m logm) m is the number of frequencies Space: O(n) ''' counts = {} # number -> count freq = {} # count -> number list for n in nums : counts [ n ] = counts . get ( n , 0 ) + 1 for n , v in counts . items (): freq [ v ] = freq . get ( v , []) + [ n ] # sorted by requency, take the highest ones first occur_list = sorted ( freq . keys (), reverse = True ) result = [] while len ( result ) < k : num_list = freq . get ( occur_list . pop ( 0 )) result += num_list return result [: k ] class SolutionImproved1 : def topKFrequent ( self , nums : List [ int ], k : int ) -> List [ int ]: ''' freq: count -> number list Skip sort: find the Max freq, take that, and then keep try -1 (like bucket sort) Time : O(n) Space: O(n) ''' counts = {} # number -> count freq = {} # count -> number list for n in nums : counts [ n ] = counts . get ( n , 0 ) + 1 for n , v in counts . items (): freq [ v ] = freq . get ( v , []) + [ n ] occur = max ( freq . keys ()) result = [] while len ( result ) < k : if occur in freq : num_list = freq . pop ( occur ) result += num_list occur -= 1 return result [: k ]","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0347_top-k-frequent-elements.html","loc":"https://tofucode.com/posts/leetcode_0347_top-k-frequent-elements.html"},{"title":"Leetcode 0682. Baseball Game","text":"Question Link : https://leetcode.com/problems/baseball-game/ Difficulty: Easy Question You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores. At the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following: An integer x - Record a new score of x. \"+\" - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores. \"D\" - Record a new score that is double the previous score. It is guaranteed there will always be a previous score. \"C\" - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score. Return the sum of all the scores on the record. Example 1: Input: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"] Output: 30 Explanation: \"5\" - Add 5 to the record, record is now [5]. \"2\" - Add 2 to the record, record is now [5, 2]. \"C\" - Invalidate and remove the previous score, record is now [5]. \"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10]. \"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15]. The total sum is 5 + 10 + 15 = 30. Example 2: Input: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"] Output: 27 Explanation: \"5\" - Add 5 to the record, record is now [5]. \"-2\" - Add -2 to the record, record is now [5, -2]. \"4\" - Add 4 to the record, record is now [5, -2, 4]. \"C\" - Invalidate and remove the previous score, record is now [5, -2]. \"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4]. \"9\" - Add 9 to the record, record is now [5, -2, -4, 9]. \"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5]. \"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14]. The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27. Example 3: Input: ops = [\"1\"] Output: 1 Constraints: 1 <= ops.length <= 1000 ops[i] is \"C\", \"D\", \"+\", or a string representing an integer in the range [-3 * 104, 3 * 104]. For operation \"+\", there will always be at least two previous scores on the record. For operations \"C\" and \"D\", there will always be at least one previous score on the record. Solution Note that isdigit() does not check for negative numbers so either do a left strip first or add number in the else statement Code ''' Leetcode 0682. Baseball Game Question Link : https://leetcode.com/problems/baseball-game/ Solution Link : https://tofucode.com/posts/leetcode_0682_baseball-game.html ''' class Solution : def calPoints ( self , ops : List [ str ]) -> int : result = [] for x in ops : if x . lstrip ( \"-\" ) . isdigit (): result . append ( int ( x )) elif x == \"+\" : result . append ( result [ - 1 ] + result [ - 2 ]) elif x == \"D\" : result . append ( result [ - 1 ] * 2 ) elif x == \"C\" : result . pop () return sum ( result )","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0682_baseball-game.html","loc":"https://tofucode.com/posts/leetcode_0682_baseball-game.html"},{"title":"Leetcode 0011. Container With Most Water","text":"Question Link : https://leetcode.com/problems/container-with-most-water/ Difficulty: Medium Question You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store. Notice that you may not slant the container. Example 1: Input: height = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49. Example 2: Input: height = [1,1] Output: 1 Constraints: n == height.length 2 <= n <= 105 0 <= height[i] <= 104 Solution Use two pointers from start and end and go towards the middle. Always move the shorter one of the two since that is the bottleneck Code ''' Leetcode 0011. Container With Most Water Question Link : https://leetcode.com/problems/container-with-most-water/ Solution Link : https://tofucode.com/posts/leetcode_0011_container-with-most-water.html ''' class Solution : def maxArea ( self , height : List [ int ]) -> int : ''' Time : O(n) Space: O(1) ''' a = 0 b = len ( height ) - 1 result = 0 while a < b : current = min ( height [ a ], height [ b ]) * ( b - a ) result = max ( result , current ) if height [ a ] < height [ b ]: a += 1 else : b -= 1 return result","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0011_container-with-most-water.html","loc":"https://tofucode.com/posts/leetcode_0011_container-with-most-water.html"},{"title":"Leetcode 0344. Reverse String","text":"Question Link : https://leetcode.com/problems/reverse-string/ Difficulty: Easy Question Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory. Example 1: Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"] Output: [\"o\",\"l\",\"l\",\"e\",\"h\"] Example 2: Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"] Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"] Constraints: 1 <= s.length <= 105 s[i] is a printable ascii character. Solution Use 2 pointers from start and end and swap Code ''' Leetcode 0344. Reverse String Question Link : https://leetcode.com/problems/reverse-string/ Solution Link : https://tofucode.com/posts/leetcode_0344_reverse-string.html ''' class Solution : def reverseString ( self , s : List [ str ]) -> None : \"\"\" Do not return anything, modify s in-place instead. \"\"\" if not s : return i = 0 j = len ( s ) - 1 while i < j : s [ i ], s [ j ] = s [ j ], s [ i ] i += 1 j -= 1","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0344_reverse-string.html","loc":"https://tofucode.com/posts/leetcode_0344_reverse-string.html"},{"title":"Leetcode 0074. Search a 2D Matrix","text":"Question Link : https://leetcode.com/problems/search-a-2d-matrix/ Difficulty: Medium Question Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties: Integers in each row are sorted from left to right. The first integer of each row is greater than the last integer of the previous row. Example 1: Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3 Output: true Example 2: Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13 Output: false Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 100 -104 <= matrix[i][j], target <= 104 Solution Use 2x binary search with a bisect_left, note that the first one for the row position we use everthing of the last column Code ''' Leetcode 0074. Search a 2D Matrix Question Link : https://leetcode.com/problems/search-a-2d-matrix/ Solution Link : https://tofucode.com/posts/leetcode_0074_search-a-2d-matrix.html ''' class Solution : def searchMatrix ( self , matrix : List [ List [ int ]], target : int ) -> bool : ''' 2x Binary search Time : O(log m + log n) Space: O(1) ''' if not matrix or not matrix [ 0 ]: return False # use the right most col as we are doing bisect_left row = self . binarySearch ([ x [ - 1 ] for x in matrix ], target ) if row == len ( matrix ): return False col = self . binarySearch ( matrix [ row ], target ) if col == len ( matrix [ row ]): return False return matrix [ row ][ col ] == target def binarySearch ( self , nums , target ): ''' bisect_left: returns the left index that target would go ''' l = 0 r = len ( nums ) while l < r : mid = ( l + r ) // 2 if nums [ mid ] < target : l = mid + 1 else : r = mid return l","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0074_search-a-2d-matrix.html","loc":"https://tofucode.com/posts/leetcode_0074_search-a-2d-matrix.html"},{"title":"Leetcode 0881. Boats to Save People","text":"Question Link : https://leetcode.com/problems/boats-to-save-people/ Difficulty: Medium Question You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit. Return the minimum number of boats to carry every given person. Example 1: Input: people = [1,2], limit = 3 Output: 1 Explanation: 1 boat (1, 2) Example 2: Input: people = [3,2,2,1], limit = 3 Output: 3 Explanation: 3 boats (1, 2), (2) and (3) Example 3: Input: people = [3,5,3,4], limit = 5 Output: 4 Explanation: 4 boats (3), (3), (4), (5) Constraints: 1 <= people.length <= 5 * 104 1 <= people[i] <= limit <= 3 * 104 Solution First sort the people by weight Since each boat can at most carry 2 people, we can greedily try to pair people from the lightest and heaviest using two pointers Code ''' Leetcode 0881. Boats to Save People Question Link : https://leetcode.com/problems/boats-to-save-people/ Solution Link : https://tofucode.com/posts/leetcode_0881_boats-to-save-people.html ''' class Solution : def numRescueBoats ( self , people : List [ int ], limit : int ) -> int : people = sorted ( people ) result = 0 i = 0 j = len ( people ) - 1 while i <= j : if people [ i ] + people [ j ] <= limit : i += 1 j -= 1 else : j -= 1 result += 1 return result","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0881_boats-to-save-people.html","loc":"https://tofucode.com/posts/leetcode_0881_boats-to-save-people.html"},{"title":"Leetcode 0991. Broken Calculator","text":"Question Link : https://leetcode.com/problems/broken-calculator/ Difficulty: Medium Question There is a broken calculator that has the integer startValue on its display initially. In one operation, you can: multiply the number on display by 2, or subtract 1 from the number on display. Given two integers startValue and target, return the minimum number of operations needed to display target on the calculator. Example 1: Input: startValue = 2, target = 3 Output: 2 Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}. Example 2: Input: startValue = 5, target = 8 Output: 2 Explanation: Use decrement and then double {5 -> 4 -> 8}. Example 3: Input: startValue = 3, target = 10 Output: 3 Explanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}. Constraints: 1 <= x, y <= 109 Solution Because there are only 2 operations, and given the odd even of a number, only 1 operation can be take if we work backwards Think in reverse since it will reveal the single correct path Code ''' Leetcode 0991. Broken Calculator Question Link : https://leetcode.com/problems/broken-calculator/ Solution Link : https://tofucode.com/posts/leetcode_0991_broken-calculator.html ''' class Solution : def brokenCalc ( self , startValue : int , target : int ) -> int : result = 0 while target > startValue : # // 2 when we can, otherwise +1 if target % 2 == 0 : target //= 2 else : target += 1 result += 1 # the remaining diff is made up with the -1 operation result += startValue - target return result","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0991_broken-calculator.html","loc":"https://tofucode.com/posts/leetcode_0991_broken-calculator.html"},{"title":"Leetcode 0946. Validate Stack Sequences","text":"Question Link : https://leetcode.com/problems/validate-stack-sequences/ Difficulty: Medium Question Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise. Example 1: Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1] Output: true Explanation: We might do the following sequence: push(1), push(2), push(3), push(4), pop() -> 4, push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1 Example 2: Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2] Output: false Explanation: 1 cannot be popped before 2. Constraints: 1 <= pushed.length <= 1000 0 <= pushed[i] <= 1000 All the elements of pushed are unique. popped.length == pushed.length popped is a permutation of pushed. Solution Simulated keep pushing into a stack Whenever there a chance to pop based on popped, greedily pop that Code ''' Leetcode 0946. Validate Stack Sequences Question Link : https://leetcode.com/problems/validate-stack-sequences/ Solution Link : https://tofucode.com/posts/leetcode_0946_validate-stack-sequences.html ''' class Solution : def validateStackSequences ( self , pushed : List [ int ], popped : List [ int ]) -> bool : ''' Whenever there's one that can be popped, try to keep popping [1,2,3,4,5] [4,5,3,2,1] ''' idx = 0 # idx of popped stack = [] for x in pushed : stack . append ( x ) while stack and idx < len ( popped ) and stack [ - 1 ] == popped [ idx ]: stack . pop () idx += 1 # valid if went through all of popped return idx == len ( popped )","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0946_validate-stack-sequences.html","loc":"https://tofucode.com/posts/leetcode_0946_validate-stack-sequences.html"},{"title":"Leetcode 1249. Minimum Remove to Make Valid Parentheses","text":"Question Link : https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/ Difficulty: Medium Question Given a string s of '(' , ')' and lowercase English characters. Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string. Formally, a parentheses string is valid if and only if: It is the empty string, contains only lowercase characters, or It can be written as AB (A concatenated with B), where A and B are valid strings, or It can be written as (A), where A is a valid string. Example 1: Input: s = \"lee(t(c)o)de)\" Output: \"lee(t(c)o)de\" Explanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted. Example 2: Input: s = \"a)b(c)d\" Output: \"ab(c)d\" Example 3: Input: s = \"))((\" Output: \"\" Explanation: An empty string is also valid. Constraints: 1 <= s.length <= 105 s[i] is either'(' , ')', or lowercase English letter. Solution Use a stack to cancel out the parentheses, the ones that are left are the invalid ones We run another loop through the stack to strip out the invalid ones from the string Code ''' Leetcode 1249. Minimum Remove to Make Valid Parentheses Question Link : https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/ Solution Link : https://tofucode.com/posts/leetcode_1249_minimum-remove-to-make-valid-parentheses.html ''' class Solution : def minRemoveToMakeValid ( self , s : str ) -> str : ''' lee(t(c)o)de) stack: ( (( ( Nothing ) remove what ever is left Time : O(n) Space: O(n) ''' stack = [] for i in range ( len ( s )): c = s [ i ] if c == '(' or c == ')' : if stack : last = stack [ - 1 ] if last [ 1 ] == '(' and c == ')' : stack . pop () else : stack . append (( i , c )) else : stack . append (( i , c )) # remove the invalid ones result = list ( s ) for i , c in stack : result [ i ] = '' return '' . join ( result )","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_1249_minimum-remove-to-make-valid-parentheses.html","loc":"https://tofucode.com/posts/leetcode_1249_minimum-remove-to-make-valid-parentheses.html"},{"title":"Leetcode 0020. Valid Parentheses","text":"Question Link : https://leetcode.com/problems/valid-parentheses/ Difficulty: Easy Question Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Example 1: Input: s = \"()\" Output: true Example 2: Input: s = \"()[]{}\" Output: true Example 3: Input: s = \"(]\" Output: false Constraints: 1 <= s.length <= 104 s consists of parentheses only '()[]{}'. Solution Use a stack to match the parentheses Code ''' Leetcode 0020. Valid Parentheses Question Link : https://leetcode.com/problems/valid-parentheses/ Solution Link : https://tofucode.com/posts/leetcode_0020_valid-parentheses.html ''' class Solution : def isValid ( self , s : str ) -> bool : ''' Time : O(n) Space: O(n) ''' matches = { \"(\" : \")\" , \"{\" : \"}\" , \"[\" : \"]\" } stack = [] for c in s : if len ( stack ) == 0 or matches . get ( stack [ - 1 ]) != c : stack . append ( c ) else : stack . pop () return len ( stack ) == 0","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0020_valid-parentheses.html","loc":"https://tofucode.com/posts/leetcode_0020_valid-parentheses.html"},{"title":"Leetcode 0138. Copy List with Random Pointer","text":"Question Link : https://leetcode.com/problems/copy-list-with-random-pointer/ Difficulty: Medium Question A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null. Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list. For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y. Return the head of the copied linked list. The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where: val: an integer representing Node.val random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node. Your code will only be given the head of the original linked list. Example 1: Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]] Output: [[7,null],[13,0],[11,4],[10,2],[1,0]] Example 2: Input: head = [[1,1],[2,1]] Output: [[1,1],[2,1]] Example 3: Input: head = [[3,null],[3,0],[3,null]] Output: [[3,null],[3,0],[3,null]] Constraints: 0 <= n <= 1000 -104 <= Node.val <= 104 Node.random is null or is pointing to some node in the linked list. Solution This is essentially a list iteration with a bit of extra work to deal with the random pointers with a hashmap Alternatively recursive solution can also be very clean Code ''' Leetcode 0138. Copy List with Random Pointer Question Link : https://leetcode.com/problems/copy-list-with-random-pointer/ Solution Link : https://tofucode.com/posts/leetcode_0138_copy-list-with-random-pointer.html ''' \"\"\" # Definition for a Node. class Node: def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None): self.val = int(x) self.next = next self.random = random \"\"\" class Solution : def copyRandomList ( self , head : 'Optional[Node]' ) -> 'Optional[Node]' : ''' list iteration with a hashmap old pointers -> new node Time : O(n) space: O(n) ''' pointers = {} # old pointers -> new node dummy = Node ( 0 ) p = head new_p = dummy while p : # get or create new node pointers [ p ] = pointers . get ( p , Node ( p . val )) # if there is random: get or create random r = p . random if r : pointers [ r ] = pointers . get ( r , Node ( r . val )) pointers [ p ] . random = pointers [ r ] # set up the new random node # move both pointers new_p . next = pointers [ p ] new_p = new_p . next p = p . next return dummy . next class SolutionAlternative1 : def copyRandomList ( self , head : 'Optional[Node]' ) -> 'Optional[Node]' : ''' list iteration with a hashmap old pointers -> new node Time : O(n) space: O(n) ''' self . pointers = {} # old pointer -> new node return self . copyRandom ( head ) def copyRandom ( self , head ): if head == None : return None if head in self . pointers : return self . pointers [ head ] # create a new node. node = Node ( head . val ) # save in hashmap self . pointers [ head ] = node # keep going to next and random via recursion node . next = self . copyRandom ( head . next ) node . random = self . copyRandom ( head . random ) return node","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0138_copy-list-with-random-pointer.html","loc":"https://tofucode.com/posts/leetcode_0138_copy-list-with-random-pointer.html"},{"title":"Leetcode 0061. Rotate List","text":"Question Link : https://leetcode.com/problems/rotate-list/ Difficulty: Medium Question Given the head of a linked list, rotate the list to the right by k places. Example 1: Input: head = [1,2,3,4,5], k = 2 Output: [4,5,1,2,3] Example 2: Input: head = [0,1,2], k = 4 Output: [2,0,1] Constraints: The number of nodes in the list is in the range [0, 500]. -100 <= Node.val <= 100 0 <= k <= 2 * 109 Solution Connect the tail to the head of the list to form a ring, this way the new problem becomes as to where to cut a new list We can k % count to find the actual offset needed to move since this is a ring Code ''' Leetcode 0061. Rotate List Question Link : https://leetcode.com/problems/rotate-list/ Solution Link : https://tofucode.com/posts/leetcode_0061_rotate-list.html ''' # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution : def rotateRight ( self , head : Optional [ ListNode ], k : int ) -> Optional [ ListNode ]: ''' [1,2,3,4,5] T H count = 5 k = 2 offset = 2 # position calculated from start of the list head_position = 3 tail_position = 2 Time : O(n) Space: O(1) ''' if not head or not head . next : return head # keep a count of the size so we know where to move count = 1 # set up a ring p = head while p . next : count += 1 p = p . next p . next = head # find the new head and tail p = head offset = k % count head_position = count - offset # subtract to go from the back tail_position = head_position - 1 for i in range ( tail_position ): p = p . next # cut the ring result = p . next p . next = None return result","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0061_rotate-list.html","loc":"https://tofucode.com/posts/leetcode_0061_rotate-list.html"},{"title":"Leetcode 0002. Add Two Numbers","text":"Question Link : https://leetcode.com/problems/add-two-numbers/ Difficulty: Medium Question You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example 1: Input: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807. Example 2: Input: l1 = [0], l2 = [0] Output: [0] Example 3: Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] Output: [8,9,9,9,0,0,0,1] Constraints: The number of nodes in each linked list is in the range [1, 100]. 0 <= Node.val <= 9 It is guaranteed that the list represents a number that does not have leading zeros. Solution Use 2 pointers to go through each list and sum up each digit Use a carry to denote when it's >= 10 At the very end, check the carry again Code ''' Leetcode 0002. Add Two Numbers Question Link : https://leetcode.com/problems/add-two-numbers/ Solution Link : https://tofucode.com/posts/leetcode_0002_add-two-numbers.html ''' # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution : def addTwoNumbers ( self , l1 : Optional [ ListNode ], l2 : Optional [ ListNode ]) -> Optional [ ListNode ]: ''' [2,4,3] [5,6,4] 7 0 7+1 carry Time : O(m + n) Space: O(m + n) ''' a = l1 b = l2 dummy = ListNode () p = dummy carry = 0 while a or b : s = carry if a : s += a . val a = a . next if b : s += b . val b = b . next carry = s // 10 s = s % 10 node = ListNode ( s ) p . next = node p = p . next # check if there is still a 1 if carry : node = ListNode ( carry ) p . next = node return dummy . next","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0002_add-two-numbers.html","loc":"https://tofucode.com/posts/leetcode_0002_add-two-numbers.html"},{"title":"Leetcode 0141. Linked List Cycle","text":"Question Link : https://leetcode.com/problems/linked-list-cycle/ Difficulty: Easy Question Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter. Return true if there is a cycle in the linked list. Otherwise, return false. Example 1: Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). Example 2: Input: head = [1,2], pos = 0 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 0th node. Example 3: Input: head = [1], pos = -1 Output: false Explanation: There is no cycle in the linked list. Constraints: The number of the nodes in the list is in the range [0, 104]. -105 <= Node.val <= 105 pos is -1 or a valid index in the linked-list. Follow up: Can you solve it using O(1) (i.e. constant) memory? Solution Use two pointer where the fast the twice the speed of the slow one If there is a cycle the fast one would catch up with the slow one Code ''' Leetcode 0141. Linked List Cycle Question Link : https://leetcode.com/problems/linked-list-cycle/ Solution Link : https://tofucode.com/posts/leetcode_0141_linked-list-cycle.html ''' # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def hasCycle ( self , head : Optional [ ListNode ]) -> bool : ''' Time : O(n) Space: O(1) ''' fast = head slow = head while True : if fast is None or fast . next is None : return False fast = fast . next . next slow = slow . next if fast == slow : return True","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0141_linked-list-cycle.html","loc":"https://tofucode.com/posts/leetcode_0141_linked-list-cycle.html"},{"title":"Leetcode 0021. Merge Two Sorted Lists","text":"Question Link : https://leetcode.com/problems/merge-two-sorted-lists/ Difficulty: Easy Question You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list. Example 1: Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2: Input: list1 = [], list2 = [] Output: [] Example 3: Input: list1 = [], list2 = [0] Output: [0] Constraints: The number of nodes in both lists is in the range [0, 50]. -100 <= Node.val <= 100 Both list1 and list2 are sorted in non-decreasing order. Solution Use 2 pointers to trace both lists and form a new list starting at a dummy head pointer When one list ends, we can append the remains of the other list onto the combined list Code ''' Leetcode 0021. Merge Two Sorted Lists Question Link : https://leetcode.com/problems/merge-two-sorted-lists/ Solution Link : https://tofucode.com/posts/leetcode_0021_merge-two-sorted-lists.html ''' # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution : def mergeTwoLists ( self , list1 : Optional [ ListNode ], list2 : Optional [ ListNode ]) -> Optional [ ListNode ]: p1 = list1 p2 = list2 head = ListNode () x = head while p1 and p2 : if p1 . val < p2 . val : x . next = p1 p1 = p1 . next else : x . next = p2 p2 = p2 . next x = x . next if p1 : x . next = p1 else : x . next = p2 return head . next","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0021_merge-two-sorted-lists.html","loc":"https://tofucode.com/posts/leetcode_0021_merge-two-sorted-lists.html"},{"title":"Leetcode 0198. House Robber","text":"Question Link : https://leetcode.com/problems/house-robber/ Difficulty: Medium Question You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police. Example 1: Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 2: Input: nums = [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 400 Solution Find the dp relationship where max money at house i depends on if you rob house i-1 or not Code ''' Leetcode 0198. House Robber Question Link : https://leetcode.com/problems/house-robber/ Solution Link : https://tofucode.com/posts/leetcode_0198_house-robber.html ''' class Solution : def rob ( self , nums : List [ int ]) -> int : ''' dp[i] = max money up to house i [2,7,9,3,1] [2 7 x ] x = max(7, 2+9) = 11 Time : O(n) Space: O(n) ''' if not nums : return 0 dp = [ 0 ] * len ( nums ) # max at robbing house i for i in range ( len ( nums )): if i == 0 : dp [ i ] = nums [ i ] elif i == 1 : dp [ i ] = max ( dp [ i - 1 ], nums [ i ]) else : dp [ i ] = max ( dp [ i - 1 ], dp [ i - 2 ] + nums [ i ]) return dp [ - 1 ] class SolutionImproved1 : def rob ( self , nums : List [ int ]) -> int : ''' Use DP with two pointers to keep track: p1 is current, p2 is previous Improved Space Time : O(n) Space: O(1) ''' if not nums : return 0 p1 = 0 p2 = 0 for i in range ( len ( nums )): p1 , p2 = max ( p2 + nums [ i ] , p1 ), p1 return p1","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0198_house-robber.html","loc":"https://tofucode.com/posts/leetcode_0198_house-robber.html"},{"title":"Leetcode 0740. Delete and Earn","text":"Question Link : https://leetcode.com/problems/delete-and-earn/ Difficulty: Medium Question You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times: Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1. Return the maximum number of points you can earn by applying the above operation some number of times. Example 1: Input: nums = [3,4,2] Output: 6 Explanation: You can perform the following operations: - Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2]. - Delete 2 to earn 2 points. nums = []. You earn a total of 6 points. Example 2: Input: nums = [2,2,3,3,3,4] Output: 9 Explanation: You can perform the following operations: - Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3]. - Delete a 3 again to earn 3 points. nums = [3]. - Delete a 3 once more to earn 3 points. nums = []. You earn a total of 9 points. Constraints: 1 <= nums.length <= 2 * 104 1 <= nums[i] <= 104 Solution First observation is that for any number that we take, we'd want to tak all intances of that number, so we can reduce nums to a counting dict This then is the same problem as the house robber problem where dp is used to solve whether to take the adjacent number Code ''' Leetcode 0740. Delete and Earn Question Link : https://leetcode.com/problems/delete-and-earn/ Solution Link : https://tofucode.com/posts/leetcode_0740_delete-and-earn.html ''' class Solution : def deleteAndEarn ( self , nums : List [ int ]) -> int : ''' [2,2,3,3,3,4] map: num -> count 2: 2 3: 3 4: 1 dp[i] = max(taking last one, not taking last one + num * count) With n elements, and k as the max number Time : O(n + x) Space: O(n + x) ''' if not nums : return 0 counts = {} for num in nums : counts [ num ] = counts . get ( num , 0 ) + 1 # + 1 so the last key is included, and can direct access with dp[-1] dp = [ 0 ] * ( max ( counts . keys ()) + 1 ) for i in range ( 1 , len ( dp )): if i == 1 : dp [ i ] = max ( dp [ i - 1 ], i * counts . get ( i , 0 )) else : dp [ i ] = max ( dp [ i - 1 ], dp [ i - 2 ] + i * counts . get ( i , 0 )) return dp [ - 1 ]","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0740_delete-and-earn.html","loc":"https://tofucode.com/posts/leetcode_0740_delete-and-earn.html"},{"title":"Leetcode 0799. Champagne Tower","text":"Question Link : https://leetcode.com/problems/champagne-tower/ Difficulty: Medium Question We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row. Each glass holds one cup of champagne. Then, some champagne is poured into the first glass at the top. When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (A glass at the bottom row has its excess champagne fall on the floor.) For example, after one cup of champagne is poured, the top most glass is full. After two cups of champagne are poured, the two glasses on the second row are half full. After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below. Now after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.) Example 1: Input: poured = 1, query_row = 1, query_glass = 1 Output: 0.00000 Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty. Example 2: Input: poured = 2, query_row = 1, query_glass = 1 Output: 0.50000 Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange. Example 3: Input: poured = 100000009, query_row = 33, query_glass = 17 Output: 1.00000 Constraints: 0 <= poured <= 109 0 <= query_glass <= query_row < 100 Solution Just simulate how the pouring happens Here we create a tower with 100 rows just like the description This means we'd need to check if next row exists when pouring in the double for loop we can just query tower[query_row][query_glass] in the end For the pouring: think of all the glasses as left aligned in the 2d array, and the ones to pour into for [i][j] are [i+1][j] and [i+1][j+1] Code ''' Leetcode 0799. Champagne Tower Question Link : https://leetcode.com/problems/champagne-tower/ Solution Link : https://tofucode.com/posts/leetcode_0799_champagne-tower.html ''' class Solution : def champagneTower ( self , poured : int , query_row : int , query_glass : int ) -> float : ''' Use similation 2 0 0 0 0 0 1 .5 .5 0 0 0 for every row including the query_row: for every col: check if excess Time : O(1) Rows&#94;2 but Rows is fixed Space: O(1) ''' tower = [[ 0 ] * x for x in range ( 1 , 101 )] # first: len 1, last: len 100 tower [ 0 ][ 0 ] = poured for i in range ( query_row + 1 ): for j in range ( len ( tower [ i ])): # if there's a next row and current cup >= 1 if i + 1 < len ( tower ) and tower [ i ][ j ] >= 1 : half = ( tower [ i ][ j ] - 1 ) / 2.0 tower [ i + 1 ][ j ] += half tower [ i + 1 ][ j + 1 ] += half tower [ i ][ j ] = 1 return tower [ query_row ][ query_glass ]","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0799_champagne-tower.html","loc":"https://tofucode.com/posts/leetcode_0799_champagne-tower.html"},{"title":"Leetcode 0413. Arithmetic Slices","text":"Question Link : https://leetcode.com/problems/arithmetic-slices/ Difficulty: Medium Question An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences. Given an integer array nums, return the number of arithmetic subarrays of nums. A subarray is a contiguous subsequence of the array. Example 1: Input: nums = [1,2,3,4] Output: 3 Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself. Example 2: Input: nums = [1] Output: 0 Constraints: 1 <= nums.length <= 5000 -1000 <= nums[i] <= 1000 Solution At any time you have an subarray with >= 3 elements, and want to add the next number to the Sequence, you are extending the sequence * And add an amount of subarraies based on the current count. This hints at dp Code ''' Leetcode 0413. Arithmetic Slices Question Link : https://leetcode.com/problems/arithmetic-slices/ Solution Link : https://tofucode.com/posts/leetcode_0413_arithmetic-slices.html ''' class Solution : def numberOfArithmeticSlices ( self , nums : List [ int ]) -> int : ''' eg. 1,2,3,4,5 (sub) [1, 2, 3] at 3: have this with the first 3 elements (sub ) [1,2,3,4] at 4: 1 subarray for every subarray that starts at the current sequence and ends at 4 (dp[i-1]) (sub) [2, 3, 4] at 4: + 1 for the 3 element ending at 4 idx: 0 1 2 3 arr: [1,2,3,4] dp: [0 0 1 x] dp[i] = number of subarrays that end at index i x = (1 from dp[i-1]) + 1 dp[i] = dp[i-1] + 1 return sum(dp) ''' dp = [ 0 ] * len ( nums ) result = 0 for i in range ( 2 , len ( dp )): if self . endsAtArithSubarray ( nums , i ): dp [ i ] = dp [ i - 1 ] + 1 result += dp [ i ] return result def endsAtArithSubarray ( self , nums , i ): return nums [ i ] - nums [ i - 1 ] == nums [ i - 1 ] - nums [ i - 2 ]","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0413_arithmetic-slices.html","loc":"https://tofucode.com/posts/leetcode_0413_arithmetic-slices.html"},{"title":"Leetcode 0001. Two Sum","text":"Question Link : https://leetcode.com/problems/two-sum/ Difficulty: Easy Question Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6 Output: [1,2] Example 3: Input: nums = [3,3], target = 6 Output: [0,1] Constraints: 2 <= nums.length <= 104 -109 <= nums[i] <= 109 -109 <= target <= 109 Only one valid answer exists. Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity? Solution ww Code ''' Leetcode 0001. Two Sum Question Link : https://leetcode.com/problems/two-sum/ Solution Link : https://tofucode.com/posts/leetcode_0001_two-sum.html ''' class Solution : def twoSum ( self , nums : List [ int ], target : int ) -> List [ int ]: ''' [3,2,4], target = 6 numbers: [2, 4] indices: [1, 2] other = target - current number 3 ? 4 ? 2 ? seen = {} # number -> index 3 -> 0, 2 -> 1, Time: O(n) Space: O(n) ''' seen = {} # number -> index for i in range ( len ( nums )): num = nums [ i ] other = target - num if other in seen : return [ seen [ other ], i ] seen [ num ] = i","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0001_two-sum.html","loc":"https://tofucode.com/posts/leetcode_0001_two-sum.html"},{"title":"Leetcode 0019. Remove Nth Node From End of List","text":"Question Link : https://leetcode.com/problems/remove-nth-node-from-end-of-list/ Difficulty: Medium Question Given the head of a linked list, remove the nth node from the end of the list and return its head. Example 1: Input: head = [1,2,3,4,5], n = 2 Output: [1,2,3,5] Example 2: Input: head = [1], n = 1 Output: [] Example 3: Input: head = [1,2], n = 1 Output: [1] Constraints: The number of nodes in the list is sz. 1 <= sz <= 30 0 <= Node.val <= 100 1 <= n <= sz Follow up: Could you do this in one pass? Solution Use two pointers to mark out the ideal end location and remove the next node. Code ''' Leetcode 0019. Remove Nth Node From End of List Question Link : https://leetcode.com/problems/remove-nth-node-from-end-of-list/ Solution Link : https://tofucode.com/posts/leetcode_0019_remove-nth-node-from-end-of-list.html ''' # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution : def removeNthFromEnd ( self , head : ListNode , n : int ) -> ListNode : ''' First move x, then start moving both x and p p x n1 n2 n3 n4 n5 x->x p->p x: goes through the whole list * count: num of nodes up to x. 1, 2, ... total size of list p: pointer to one node before the deletion * Ideal Position: (position of x) - (position of p) == n * So start moving p: count - 1 > n Time: O(n) - one pass Space: O(1) ''' if not head : return None count = 1 x = p = head while x . next : x = x . next count += 1 if count - 1 > n : p = p . next if count == n : return head . next p . next = p . next . next return head","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0019_remove-nth-node-from-end-of-list.html","loc":"https://tofucode.com/posts/leetcode_0019_remove-nth-node-from-end-of-list.html"},{"title":"Leetcode 0509. Fibonacci Number","text":"Question Link : https://leetcode.com/problems/fibonacci-number/ Difficulty: Easy Question The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is, F(0) = 0, F(1) = 1 F(n) = F(n - 1) + F(n - 2), for n > 1. Given n, calculate F(n). Example 1: Input: n = 2 Output: 1 Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1. Example 2: Input: n = 3 Output: 2 Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2. Example 3: Input: n = 4 Output: 3 Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3. Constraints: 0 <= n <= 30 Solution Use recursion and a cache. Code ''' Leetcode 0509. Fibonacci Number Question Link : https://leetcode.com/problems/fibonacci-number/ Solution Link : https://tofucode.com/posts/leetcode_0509_fibonacci-number.html ''' class Solution : # @functools.cache def fib ( self , n : int ) -> int : ''' base: F(0) = 0, F(1) = 1 func: F(n) = F(n - 1) + F(n - 2), for n > 1 eg. fib(4) fib(3) + fib(2) fib(2)+fib(1) Time: O(n) Space: O(n) ''' cache = { 0 : 0 , 1 : 1 } # n -> number return self . getFib ( cache , n ) def getFib ( self , cache , n ): if n in cache : return cache [ n ] cache [ n ] = self . getFib ( cache , n - 1 ) + self . getFib ( cache , n - 2 ) return cache [ n ]","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0509_fibonacci-number.html","loc":"https://tofucode.com/posts/leetcode_0509_fibonacci-number.html"},{"title":"Leetcode 0606. Construct String from Binary Tree","text":"Question Link : https://leetcode.com/problems/construct-string-from-binary-tree/ Difficulty: Easy Question Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it. Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree. Example 1: Input: root = [1,2,3,4] Output: \"1(2(4))(3)\" Explanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\" Example 2: Input: root = [1,2,3,null,4] Output: \"1(2()(4))(3)\" Explanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output. Constraints: The number of nodes in the tree is in the range [1, 104]. -1000 <= Node.val <= 1000 Solution Use recursion to build the string while considering different cases of when to omit the parenthesis. Code ''' Leetcode 0606. Construct String from Binary Tree Question Link : https://leetcode.com/problems/construct-string-from-binary-tree/ Solution Link : https://tofucode.com/posts/leetcode_0606_construct-string-from-binary-tree.html ''' # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution : def tree2str ( self , t : TreeNode ) -> str : ''' current + left + right 1 (2(4)()) (3()()) (4)() 3()() Time: O(n) Space: O(n) ''' if not t : return \"\" current = str ( t . val ) left = self . wrap ( self . tree2str ( t . left )) right = self . wrap ( self . tree2str ( t . right )) if not t . left and not t . right : return current elif not t . right : return current + left return current + left + right def wrap ( self , s ): return '(' + s + ')'","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0606_construct-string-from-binary-tree.html","loc":"https://tofucode.com/posts/leetcode_0606_construct-string-from-binary-tree.html"}]};