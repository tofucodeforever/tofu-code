var tipuesearch = {"pages":[{"title":"TofuCode404 Page not found","text":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'G-DCBDZPQQD1', 'auto');\n  ga('send', 'pageview');\n\n\n\n\n\n\n\n\n\n\nTofuCode404 Page not found\n\n\n\n\n\n\n\n\nTofuCode\n\n\n\n\n\n\n\n\n\nInterview Questions\n\n\nRecent Questions\n\n\nTags\n\n\n\n\n\n\n\n 404 Page Note Found \n Try a search \n\n\n\n\n\n Eat Tofu and be true \nÂ© 2022 TofuCode.com\n\nBuilt with Pelican using Flex theme\n \n\n\n{\n  \"@context\" : \"http://schema.org\",\n  \"@type\" : \"Blog\",\n  \"name\": \" TofuCode \",\n  \"url\" : \"https://tofucode.com\",\n  \"image\": \"\",\n  \"description\": \"\"\n}\n\n\n      $(document).ready(function() {\n        $('#tipue_search_input').tipuesearch();\n      });\n    \n\n","tags":"","url":"https://tofucode.com/404.html"},{"title":"Hello there","text":"Quick Start For a table of all the questions: Interview Questions For a list of all questions tags: Tags","tags":"pages","url":"https://tofucode.com/pages/hello-there.html","loc":"https://tofucode.com/pages/hello-there.html"},{"title":"Interview Questions","text":"# Question Tags 0001 Two Sum hash-map 0019 Remove Nth Node From End of List linked-list 0285 Inorder Successor in BST bst 0509 Fibonacci Number recursion 0536 Construct Binary Tree from String recursion, binary-tree 1151 Minimum Swaps to Group All 1's Together sliding-window 1228 Missing Number In Arithmetic Progression binary-search 0606 Construct String from Binary Tree recursion, binary-tree","tags":"pages","url":"https://tofucode.com/pages/interview-questions.html","loc":"https://tofucode.com/pages/interview-questions.html"},{"title":"Leetcode 1228. Missing Number In Arithmetic Progression","text":"Question Link : https://leetcode.com/problems/missing-number-in-arithmetic-progression/ Difficulty: Easy Question In some array arr, the values were in arithmetic progression: the values arr[i + 1] - arr[i] are all equal for every 0 <= i < arr.length - 1. A value from arr was removed that was not the first or last value in the array. Given arr, return the removed value. Example 1: Input: arr = [5,7,11,13] Output: 9 Explanation: The previous array was [5,7,9,11,13]. Example 2: Input: arr = [15,13,12] Output: 14 Explanation: The previous array was [15,14,13,12]. Constraints: 3 <= arr.length <= 1000 0 <= arr[i] <= 105 The given array is guaranteed to be a valid array. Solution Trivial solution can be done in linear time by either scanning or with the sum equation. optimal solution is to use binary search. Code ''' Leetcode 1228. Missing Number In Arithmetic Progression Question Link : https://leetcode.com/problems/missing-number-in-arithmetic-progression/ Solution Link : https://tofucode.com/posts/leetcode_1228_missing-number-in-arithmetic-progression.html ''' class Solution : def missingNumber ( self , arr : List [ int ]) -> int : ''' diff = 2 0 1 2 3 5,7,11,13 l r m l r m l/r Time: O(log n) Space: O(1) ''' diff = ( arr [ - 1 ] - arr [ 0 ]) // len ( arr ) l = 0 r = len ( arr ) - 1 while l < r : mid = ( l + r ) // 2 if arr [ mid ] == arr [ 0 ] + mid * diff : l = mid + 1 else : r = mid return arr [ 0 ] + l * diff","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_1228_missing-number-in-arithmetic-progression.html","loc":"https://tofucode.com/posts/leetcode_1228_missing-number-in-arithmetic-progression.html"},{"title":"Leetcode 1151. Minimum Swaps to Group All 1's Together","text":"Question Link : https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together/ Difficulty: Medium Question Given a binary array data, return the minimum number of swaps required to group all 1's present in the array together in any place in the array. Example 1: Input: data = [1,0,1,0,1] Output: 1 Explanation: There are 3 ways to group all 1's together: [1,1,1,0,0] using 1 swap. [0,1,1,1,0] using 2 swaps. [0,0,1,1,1] using 1 swap. The minimum is 1. Example 2: Input: data = [0,0,0,1,0] Output: 0 Explanation: Since there is only one 1 in the array, no swaps needed. Example 3: Input: data = [1,0,1,0,1,0,0,1,1,0,1] Output: 3 Explanation: One possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1]. Example 4: Input: data = [1,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1] Output: 8 Constraints: 1 <= data.length <= 105 data[i] is 0 or 1. Solution Use a fixed size sliding window to check all possible answers and find the min moves. Code ''' Leetcode 1151. Minimum Swaps to Group All 1's Together Question Link : https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together/ Solution Link : https://tofucode.com/posts/leetcode_1151_minimum-swaps-to-group-all-1s-together.html ''' class Solution : def minSwaps ( self , data : List [ int ]) -> int : ''' Fix sized sliding window [1,0,1,0,1] 1,0,1 (1s: 2 -> 1 swap) 0,1,0 (1s: 1 -> 2 swaps) 1,0,1 (1s: 2 -> 1 swap) [1,1,1,0,0] using 1 swap. [0,1,1,1,0] using 2 swaps. [0,0,1,1,1] using 1 swap. Time: O(n) Space:O(1) ''' total = sum ( data ) # len of sliding window result = math . inf window = sum ( data [: total ]) # current count of 1s result = min ( result , total - window ) for i in range ( total , len ( data )): # add current if data [ i ] == 1 : window += 1 # remove tail if data [ i - total ] == 1 : window -= 1 # check result = min ( result , total - window ) return result","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_1151_minimum-swaps-to-group-all-1s-together.html","loc":"https://tofucode.com/posts/leetcode_1151_minimum-swaps-to-group-all-1s-together.html"},{"title":"Leetcode 0019. Remove Nth Node From End of List","text":"Question Link : https://leetcode.com/problems/remove-nth-node-from-end-of-list/ Difficulty: Medium Question Given the head of a linked list, remove the nth node from the end of the list and return its head. Follow up: Could you do this in one pass? Example 1: Input: head = [1,2,3,4,5], n = 2 Output: [1,2,3,5] Example 2: Input: head = [1], n = 1 Output: [] Example 3: Input: head = [1,2], n = 1 Output: [1] Constraints: The number of nodes in the list is sz. 1 <= sz <= 30 0 <= Node.val <= 100 1 <= n <= sz Solution Use two pointers to mark out the ideal end location and remove the next node. Code ''' Leetcode 0019. Remove Nth Node From End of List Question Link : https://leetcode.com/problems/remove-nth-node-from-end-of-list/ Solution Link : https://tofucode.com/posts/leetcode_0019_remove-nth-node-from-end-of-list.html ''' # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution : def removeNthFromEnd ( self , head : ListNode , n : int ) -> ListNode : ''' First move x, then start moving both x and p p x n1 n2 n3 n4 n5 x->x p->p x: goes through the whole list * count: num of nodes up to x. 1, 2, ... total size of list p: pointer to one node before the deletion * Ideal Position: (position of x) - (position of p) == n * So start moving p: count - 1 > n Time: O(n) - one pass Space: O(1) ''' if not head : return None count = 1 x = p = head while x . next : x = x . next count += 1 if count - 1 > n : p = p . next if count == n : return head . next p . next = p . next . next return head","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0019_remove-nth-node-from-end-of-list.html","loc":"https://tofucode.com/posts/leetcode_0019_remove-nth-node-from-end-of-list.html"},{"title":"Leetcode 0509. Fibonacci Number","text":"Question Link : https://leetcode.com/problems/fibonacci-number/ Difficulty: Easy Question The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is, F(0) = 0, F(1) = 1 F(n) = F(n - 1) + F(n - 2), for n > 1. Given n, calculate F(n). Example 1: Input: n = 2 Output: 1 Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1. Example 2: Input: n = 3 Output: 2 Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2. Example 3: Input: n = 4 Output: 3 Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3. Constraints: 0 <= n <= 30 Solution Use recursion and a cache. Code ''' Leetcode 0509. Fibonacci Number Question Link : https://leetcode.com/problems/fibonacci-number/ Solution Link : https://tofucode.com/posts/leetcode_0509_fibonacci-number.html ''' class Solution : # @functools.cache def fib ( self , n : int ) -> int : ''' base: F(0) = 0, F(1) = 1 func: F(n) = F(n - 1) + F(n - 2), for n > 1 eg. fib(4) fib(3) + fib(2) fib(2)+fib(1) Time: O(n) Space: O(n) ''' cache = { 0 : 0 , 1 : 1 } # n -> number return self . getFib ( cache , n ) def getFib ( self , cache , n ): if n in cache : return cache [ n ] cache [ n ] = self . getFib ( cache , n - 1 ) + self . getFib ( cache , n - 2 ) return cache [ n ]","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0509_fibonacci-number.html","loc":"https://tofucode.com/posts/leetcode_0509_fibonacci-number.html"},{"title":"Leetcode 0285. Inorder Successor in BST","text":"Question Link : https://leetcode.com/problems/inorder-successor-in-bst/ Difficulty: Medium Question Given the root of a binary search tree and a node p in it, return the in-order successor of that node in the BST. If the given node has no in-order successor in the tree, return null. The successor of a node p is the node with the smallest key greater than p.val. Example 1: Input: root = [2,1,3], p = 1 Output: 2 Explanation: 1's in-order successor node is 2. Note that both p and the return value is of TreeNode type. Example 2: Input: root = [5,3,6,2,4,null,null,1], p = 6 Output: null Explanation: There is no in-order successor of the current node, so the answer is null. Constraints: The number of nodes in the tree is in the range [1, 104]. -105 <= Node.val <= 105 All Nodes will have unique values. Solution Consider different cases and search from the root. Code ''' Leetcode 0285. Inorder Successor in BST Question Link : https://leetcode.com/problems/inorder-successor-in-bst/ Solution Link : https://tofucode.com/posts/leetcode_0285_inorder-successor-in-bst.html ''' # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution : def inorderSuccessor ( self , root : 'TreeNode' , p : 'TreeNode' ) -> 'TreeNode' : ''' node smaller bigger Time: O(n) Space: O(1) ''' # go one step right, keep going left if p . right : p = p . right while p . left : p = p . left return p # search for p, keep track of last one node = root last = None while node != p : if p . val < node . val : last = node node = node . left else : node = node . right return last","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0285_inorder-successor-in-bst.html","loc":"https://tofucode.com/posts/leetcode_0285_inorder-successor-in-bst.html"},{"title":"Leetcode 0536. Construct Binary Tree from String","text":"Question Link : https://leetcode.com/problems/construct-binary-tree-from-string/ Difficulty: Medium Question You need to construct a binary tree from a string consisting of parenthesis and integers. The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure. You always start to construct the left child node of the parent first if it exists. Example 1: Input: s = \"4(2(3)(1))(6(5))\" Output: [4,2,6,3,1,5] Example 2: Input: s = \"4(2(3)(1))(6(5)(7))\" Output: [4,2,6,3,1,5,7] Example 3: Input: s = \"-4(2(3)(1))(6(5)(7))\" Output: [-4,2,6,3,1,5,7] Constraints: 0 <= s.length <= 3 * 104 s consists of digits, '(', ')', and '-' only. Solution Use recursion and an index pointer to build a binary tree. Code ''' Leetcode 0536. Construct Binary Tree from String Question Link : https://leetcode.com/problems/construct-binary-tree-from-string/ Solution Link : https://tofucode.com/posts/leetcode_0536_construct-binary-tree-from-string.html ''' # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution : def str2tree ( self , s : str ) -> TreeNode : ''' 4244(2(3)(1))(6(5)) can have negative numbers idx = 0 recursion: parse the current number go left - skip ( go right if needed - skip ( skip ) Time: O(n) Space: O(n) ''' self . idx = 0 return self . str2node ( s ) def str2node ( self , s ): if self . idx == len ( s ): return None node = TreeNode () node . val = self . getNumber ( s ) # go left if self . idx < len ( s ) and s [ self . idx ] == '(' : self . idx += 1 node . left = self . str2node ( s ) # go right if self . idx < len ( s ) and s [ self . idx ] == '(' : self . idx += 1 node . right = self . str2node ( s ) # skip ) if self . idx < len ( s ) and s [ self . idx ] == ')' : self . idx += 1 return node def getNumber ( self , s ): sign = 1 if s [ self . idx ] == '-' : sign = - 1 self . idx += 1 num = '' while self . idx < len ( s ) and s [ self . idx ] . isdigit (): num += s [ self . idx ] self . idx += 1 return sign * int ( num )","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0536_construct-binary-tree-from-string.html","loc":"https://tofucode.com/posts/leetcode_0536_construct-binary-tree-from-string.html"},{"title":"Leetcode 0606. Construct String from Binary Tree","text":"Question Link : https://leetcode.com/problems/construct-string-from-binary-tree/ Difficulty: Easy Question You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way. The null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree. Example 1: Input: Binary tree: [1,2,3,4] 1 / \\ 2 3 / 4 Output: \"1(2(4))(3)\" Explanation: Originallay it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\". Example 2: Input: Binary tree: [1,2,3,null,4] 1 / \\ 2 3 \\ 4 Output: \"1(2()(4))(3)\" Explanation: Almost the same as the first example, except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output. Solution Use recursion to build the string while considering different cases of when to omit the parenthesis. Code ''' Leetcode 0606. Construct String from Binary Tree Question Link : https://leetcode.com/problems/construct-string-from-binary-tree/ Solution Link : https://tofucode.com/posts/leetcode_0606_construct-string-from-binary-tree.html ''' # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution : def tree2str ( self , t : TreeNode ) -> str : ''' current + left + right 1 (2(4)()) (3()()) (4)() 3()() Time: O(n) Space: O(n) ''' if not t : return \"\" current = str ( t . val ) left = self . wrap ( self . tree2str ( t . left )) right = self . wrap ( self . tree2str ( t . right )) if not t . left and not t . right : return current elif not t . right : return current + left return current + left + right def wrap ( self , s ): return '(' + s + ')'","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0606_construct-string-from-binary-tree.html","loc":"https://tofucode.com/posts/leetcode_0606_construct-string-from-binary-tree.html"},{"title":"Leetcode 0001. Two Sum","text":"Question Link : https://leetcode.com/problems/two-sum/ Difficulty: Easy Question Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Output: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6 Output: [1,2] Example 3: Input: nums = [3,3], target = 6 Output: [0,1] Constraints: 2 <= nums.length <= 103 -109 <= nums[i] <= 109 -109 <= target <= 109 Only one valid answer exists. Solution Use a hashmap to store number to index info for look up Code ''' Leetcode 0001. Two Sum Question Link : https://leetcode.com/problems/two-sum/ Solution Link : https://tofucode.com/posts/leetcode_0001_two-sum.html ''' class Solution : def twoSum ( self , nums : List [ int ], target : int ) -> List [ int ]: ''' [3,2,4], target = 6 numbers: [2, 4] indices: [1, 2] other = target - current number 3 ? 4 ? 2 ? seen = {} # number -> index 3 -> 0, 2 -> 1, Time: O(n) Space: O(n) ''' seen = {} # number -> index for i in range ( len ( nums )): num = nums [ i ] other = target - num if other in seen : return [ seen [ other ], i ] seen [ num ] = i","tags":"Leetcode","url":"https://tofucode.com/posts/leetcode_0001_two-sum.html","loc":"https://tofucode.com/posts/leetcode_0001_two-sum.html"}]};